#include <cmath>
#include <cstdlib>
#include <cstdio>

#ifdef __CUDACC__
#define DEVICE __device__
#define CONSTANT __constant__
#define SHARED __shared__
#define GLOBAL __global__
#else
#define DEVICE
#define CONSTANT
#define SHARED
#define GLOBAL
#endif
#define CUDA_BLOCK_SIZE 32

using u8 = unsigned char;
using u32 = unsigned;
using u64 = unsigned long long;
using f32 = float;

constexpr f32 EPS = 1.0f / 128.0f;
constexpr f32 PI = 3.14159265358979323846264338327950288f;

struct Vec3 {
  f32 x, y, z;

  DEVICE Vec3 operator+(const Vec3 &rhs) const {
    return {x + rhs.x, y + rhs.y, z + rhs.z};
  }

  DEVICE Vec3 operator-(const Vec3 &rhs) const {
    return {x - rhs.x, y - rhs.y, z - rhs.z};
  }

  DEVICE Vec3 operator+(f32 rhs) const {
    return {x + rhs, y + rhs, z + rhs};
  }

  DEVICE Vec3 operator-(f32 rhs) const {
    return {x - rhs, y - rhs, z - rhs};
  }

  DEVICE Vec3 operator*(f32 rhs) const {
    return {x * rhs, y * rhs, z * rhs};
  }

  DEVICE Vec3 operator/(f32 rhs) const {
    return *this * (1.0f / rhs);
  }

  DEVICE Vec3 operator-() const {
    return {-x, -y, -z};
  }

  DEVICE void operator+=(const Vec3 &rhs) {
    x += rhs.x, y += rhs.y, z += rhs.z;
  }

  DEVICE void operator-=(const Vec3 &rhs) {
    x -= rhs.x, y -= rhs.y, z -= rhs.z;
  }

  DEVICE void operator*=(f32 rhs) {
    x *= rhs, y *= rhs, z *= rhs;
  }

  DEVICE void operator/=(f32 rhs) {
    *this *= 1.0f / rhs;
  }

  DEVICE f32 len2() const {
    return dot(*this);
  }

  DEVICE f32 len() const {
    return sqrtf(len2());
  }

  DEVICE Vec3 norm() const {
    return *this / len();
  }

  DEVICE Vec3 orthogonal_unit() const {
    return fabsf(y) != 1.0f ? Vec3{z, 0.0f, -x}.norm() : Vec3{0.0f, z, -y}.norm();
  }

  DEVICE Vec3 schur(const Vec3 &rhs) const {
    return {x * rhs.x, y * rhs.y, z * rhs.z};
  }

  DEVICE f32 dot(const Vec3 &rhs) const {
    return x * rhs.x + y * rhs.y + z * rhs.z;
  }

  DEVICE Vec3 cross(const Vec3 &rhs) const {
    return {y * rhs.z - z * rhs.y, z * rhs.x - x * rhs.z, x * rhs.y - y * rhs.x};
  }

  DEVICE f32 operator[](u32 idx) const {
    return (&x)[idx];
  }

#ifdef __CUDACC__
  DEVICE static Vec3 from_float4(float4 f) {
    return {f.x, f.y, f.z};
  }
#endif
};

struct Vec2 {
  f32 x, y;

  DEVICE Vec2 operator+(const Vec2 &rhs) const {
    return {x + rhs.x, y + rhs.y};
  }

  DEVICE Vec2 operator-(const Vec2 &rhs) const {
    return {x - rhs.x, y - rhs.y};
  }

  DEVICE Vec2 operator*(f32 rhs) const {
    return {x * rhs, y * rhs};
  }

  DEVICE f32 dot(const Vec2 &rhs) const {
    return x * rhs.x + y * rhs.y;
  }

  DEVICE f32 len2() const {
    return dot(*this);
  }

  DEVICE f32 len() const {
    return sqrtf(len2());
  }

  DEVICE Vec3 to_vec3() const {
    return {x, y, 0.0f};
  }
};

DEVICE inline f32 mod1(f32 x) {
  x = fmodf(x, 1.0f);
  return x < 0.0f ? x + 1.0f : x;
}

struct Ray {
  Vec3 o, d;
};

struct XorShiftRNG {
  u32 seed;

  DEVICE XorShiftRNG(u32 seed) : seed(seed ? seed : 1) {}

  DEVICE f32 gen() {
    seed ^= seed << 13;
    seed ^= seed >> 17;
    seed ^= seed << 5;
    return seed * (1.0f / -1u);
  }

  DEVICE u32 gen_u32() {
    seed ^= seed << 13;
    seed ^= seed >> 17;
    seed ^= seed << 5;
    return seed;
  }
};

struct HitRes {
  f32 t;
  Vec3 norm;
  u32 text;
  Vec3 col;
  f32 n;
};

#define BB_HIT_RAY_OUT(out_min, out_max, min, max, o, inv_d)                                     \
  ({                                                                                             \
    Vec3 __t0s = (min - o).schur(inv_d), t1s = (max - o).schur(inv_d);                           \
    out_min = fmaxf(fminf(__t0s.x, t1s.x), fmaxf(fminf(__t0s.y, t1s.y), fminf(__t0s.z, t1s.z))); \
    out_max = fminf(fmaxf(__t0s.x, t1s.x), fminf(fmaxf(__t0s.y, t1s.y), fmaxf(__t0s.z, t1s.z))); \
    0.0f < out_max && out_min < out_max;                                                         \
  })

#define BB_HIT_RAY(min, max, o, inv_d)                    \
  ({                                                      \
    f32 __t_min, __t_max;                                 \
    BB_HIT_RAY_OUT(__t_min, __t_max, min, max, o, inv_d); \
  })

// used for calculate triangle-ray hit
// http://jcgt.org/published/0005/03/03/
//struct TriMat {
//  f32 m00, m01, m02, m03;
//  f32 m10, m11, m12, m13;
//  f32 m20, m21, m22, m23;
//};

struct KDNode {
  Vec3 min, max;
  union {
    struct { // leaf, len = actual len | (1 << 31)
      u32 len;
      Vec3 pe[0];
//      TriMat ms[0]; // also store n & uv after ms
    };
    struct { // internal
      u32 ch1, sp_d;
      f32 sp;
    };
  };
};

// "short stack" algorithm
// http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.83.2823&rep=rep1&type=pdf
// if col.x < 0.0, rt should contain color info(after ptr n)
DEVICE inline bool kd_node_hit(const KDNode * __restrict__ rt, const Ray &ray, HitRes &res, u32 text, const Vec3 &col) {
  struct {
    u32 off;
    f32 t_min, t_max;
  } stk[16];
  u32 top = 0;
  const char * __restrict__ rt_b = (const char *)rt;
  Vec3 inv_d{1.0f / ray.d.x, 1.0f / ray.d.y, 1.0f / ray.d.z};
  f32 root_min, root_max, t_min, t_max;
  const KDNode * __restrict__ x;
  bool push_down, hit = false;
  if (BB_HIT_RAY_OUT(root_min, root_max, rt->min, rt->max, ray.o, inv_d)) {
    t_max = root_min;
    while (t_max < root_max) {
      if (top == 0) {
        t_min = t_max;
        t_max = root_max;
        x = rt;
        push_down = true;
      } else {
        --top;
        t_min = stk[top].t_min;
        t_max = stk[top].t_max;
        x = (const KDNode *)(rt_b + stk[top].off);
        push_down = false;
      }
      while (BB_HIT_RAY(x->min, x->max, ray.o, inv_d)) {
        if (x->len >> 31) { // leaf
          u32 len = x->len & 0x7fffffff;
          const Vec3 * __restrict__ pe = x->pe, * __restrict__ n = pe + len;
          const Vec2 * __restrict__ uv = (const Vec2 *)(n + len);
          for (u32 i = 0; i < len; i += 3) {
            Vec3 p1 = pe[i], e1 = pe[i + 1], e2 = pe[i + 2];
            Vec3 p = ray.d.cross(e2);
            f32 det = e1.dot(p);
            f32 inv_det = 1.0f / det;
            Vec3 d = ray.o - p1;
            f32 u = d.dot(p) * inv_det;
            if (u < 0.0f || u > 1.0f) { continue; }
            Vec3 q = d.cross(e1);
            f32 v = ray.d.dot(q) * inv_det;
            if (v < 0.0f || u + v > 1.0f) { continue; };
            f32 t = e2.dot(q) * inv_det;
            if (t > EPS) {
              if (t < res.t) {
                res.t = t;
                res.norm = n[i] * (1.0f - u - v) + n[i + 1] * u + n[i + 2] * v;
                res.text = text;
                if (col.x < 0.0) {
                  res.col = (uv[i] * (1.0f - u - v) + uv[i + 1] * u + uv[i + 2] * v).to_vec3();
                } else {
                  res.col = col;
                }
                hit = true;
              }
              if (t < t_max) {
                return hit;
              }
            }
          }
          break;
        } else { // internal
          u32 sp_d = x->sp_d;
          f32 sp = x->sp;
          f32 t_sp = (sp - ray.o[sp_d]) / ray.d[sp_d];
          u32 fst = ((const char *)(x) - rt_b) + 24 + 12, snd = x->ch1;
          if (ray.d[sp_d] < 0.0) {
            u32 t = fst; fst = snd; snd = t;
          }
          if (t_sp <= t_min) {
            x = (const KDNode *)(rt_b + snd);
          } else if (t_sp >= t_max) {
            x = (const KDNode *)(rt_b + fst);
          } else {
            stk[top++] = {snd, t_sp, t_max};
            x = (const KDNode *)(rt_b + fst);
            t_max = t_sp;
            push_down = false;
          }
          if (push_down) {
            rt = x;
          }
        }
      }
    }
  }
  return false;
}

/*
Copyright (C) 2017 Milo Yip. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of pngout nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

inline void svpng(FILE *fp, u32 w, u32 h, const u8 *img, bool alpha) {
  static const u32 t[] = {0, 0x1db71064, 0x3b6e20c8, 0x26d930ac, 0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
      /* CRC32 Table */    0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c, 0x9b64c2b0, 0x86d3d2d4, 0xa00ae278,
                          0xbdbdf21c};
  u32 a = 1, b = 0, c, p = w * (alpha ? 4 : 3) + 1, x, y, i;   /* ADLER-a, ADLER-b, CRC, pitch */
#define SVPNG_PUT(u) fputc(u, fp)
#define SVPNG_U8A(ua, l) for (i = 0; i < l; i++) SVPNG_PUT((ua)[i]);
#define SVPNG_U32(u) do { SVPNG_PUT((u) >> 24); SVPNG_PUT(((u) >> 16) & 255); SVPNG_PUT(((u) >> 8) & 255); SVPNG_PUT((u) & 255); } while(0)
#define SVPNG_U8C(u) do { SVPNG_PUT(u); c ^= (u); c = (c >> 4) ^ t[c & 15]; c = (c >> 4) ^ t[c & 15]; } while(0)
#define SVPNG_U8AC(ua, l) for (i = 0; i < l; i++) SVPNG_U8C((ua)[i])
#define SVPNG_U16LC(u) do { SVPNG_U8C((u) & 255); SVPNG_U8C(((u) >> 8) & 255); } while(0)
#define SVPNG_U32C(u) do { SVPNG_U8C((u) >> 24); SVPNG_U8C(((u) >> 16) & 255); SVPNG_U8C(((u) >> 8) & 255); SVPNG_U8C((u) & 255); } while(0)
#define SVPNG_U8ADLER(u) do { SVPNG_U8C(u); a = (a + (u)) % 65521; b = (b + a) % 65521; } while(0)
#define SVPNG_BEGIN(s, l) do { SVPNG_U32(l); c = ~0U; SVPNG_U8AC(s, 4); } while(0)
#define SVPNG_END() SVPNG_U32(~c)
  SVPNG_U8A("\x89PNG\r\n\32\n", 8);           /* Magic */
  SVPNG_BEGIN("IHDR", 13);                    /* IHDR chunk { */
  SVPNG_U32C(w);
  SVPNG_U32C(h);                              /*   Width & Height (8 bytes) */
  SVPNG_U8C(8);
  SVPNG_U8C(alpha ? 6 : 2);                   /*   Depth=8, Color=True color with/without alpha (2 bytes) */
  SVPNG_U8AC("\0\0\0", 3);                    /*   Compression=Deflate, Filter=No, Interlace=No (3 bytes) */
  SVPNG_END();                                /* } */
  SVPNG_BEGIN("IDAT", 2 + h * (5 + p) + 4);   /* IDAT chunk { */
  SVPNG_U8AC("\x78\1", 2);                    /*   Deflate block begin (2 bytes) */
  for (y = 0; y < h; y++) {                   /*   Each horizontal line makes a block for simplicity */
    SVPNG_U8C(y == h - 1);                    /*   1 for the last block, 0 for others (1 byte) */
    SVPNG_U16LC(p);
    SVPNG_U16LC(~p);                          /*   Size of block in little endian and its 1's complement (4 bytes) */
    SVPNG_U8ADLER(0);                         /*   No filter prefix (1 byte) */
    for (x = 0; x < p - 1; x++, img++)
      SVPNG_U8ADLER(*img);                    /*   Image pixel data */
  }
  SVPNG_U32C((b << 16) | a);                  /*   Deflate block end with adler (4 bytes) */
  SVPNG_END();                                /* } */
  SVPNG_BEGIN("IEND", 0);
  SVPNG_END();                                /* IEND chunk {} */
}

inline void output_png(const Vec3 *o, u32 w, u32 h, const char *path) {
  auto to_u8 = [](f32 x) { return u8(powf(x < 0.0f ? 0.0f : x > 1.0f ? 1.0f : x, 1.0f / 2.2f) * 255.0f + 0.5f); };
  FILE *fp = fopen(path, "w");
  u8 *png = (u8 *) malloc(w * h * 3 * sizeof(u8));
  for (u32 i = h - 1, cnt = 0; ~i; --i) {
    for (u32 j = 0; j < w; ++j) {
      png[cnt] = to_u8(o[i * w + j].x);
      png[cnt + 1] = to_u8(o[i * w + j].y);
      png[cnt + 2] = to_u8(o[i * w + j].z);
      cnt += 3;
    }
  }
  svpng(fp, w, h, png, false);
  fclose(fp);
  free(png);
}

#define CUDA_CHECK_ERROR(fn) do { auto code = fn; if (code != cudaSuccess) exit((fprintf(stderr,"gpu error %s @%s @%d\n", cudaGetErrorString(code), __FUNCTION__, __LINE__), -1)); } while(false)

/*DEVICE void spectral_color(f32 &r, f32 &g, f32 &b, f32 l) {
  f32 t;
  r = 0.0;
  g = 0.0;
  b = 0.0;
  if ((l >= 400.0) && (l < 410.0)) {
    t = (l - 400.0) / (410.0 - 400.0);
    r = +(0.33 * t) - (0.20 * t * t);
  } else if ((l >= 410.0) && (l < 475.0)) {
    t = (l - 410.0) / (475.0 - 410.0);
    r = 0.14 - (0.13 * t * t);
  } else if ((l >= 545.0) && (l < 595.0)) {
    t = (l - 545.0) / (595.0 - 545.0);
    r = +(1.98 * t) - (t * t);
  } else if ((l >= 595.0) && (l < 650.0)) {
    t = (l - 595.0) / (650.0 - 595.0);
    r = 0.98 + (0.06 * t) - (0.40 * t * t);
  } else if ((l >= 650.0) && (l < 700.0)) {
    t = (l - 650.0) / (700.0 - 650.0);
    r = 0.65 - (0.84 * t) + (0.20 * t * t);
  }
  if ((l >= 415.0) && (l < 475.0)) {
    t = (l - 415.0) / (475.0 - 415.0);
    g = +(0.80 * t * t);
  } else if ((l >= 475.0) && (l < 590.0)) {
    t = (l - 475.0) / (590.0 - 475.0);
    g = 0.8 + (0.76 * t) - (0.80 * t * t);
  } else if ((l >= 585.0) && (l < 639.0)) {
    t = (l - 585.0) / (639.0 - 585.0);
    g = 0.84 - (0.84 * t);
  }
  if ((l >= 400.0) && (l < 475.0)) {
    t = (l - 400.0) / (475.0 - 400.0);
    b = +(2.20 * t) - (1.50 * t * t);
  } else if ((l >= 475.0) && (l < 560.0)) {
    t = (l - 475.0) / (560.0 - 475.0);
    b = 0.7 - (t) + (0.30 * t * t);
  }
}*/

CONSTANT const Vec3 RGB_TABLE[] = {Vec3{0.000000, 0.000000, 1.211656}, Vec3{0.000000, 0.000003, 1.211656}, Vec3{0.000000, 0.000014, 1.211656}, Vec3{0.000000, 0.000035, 1.211656}, Vec3{0.000000, 0.000065, 1.211656}, Vec3{0.000000, 0.000106, 1.211656}, Vec3{0.000000, 0.000159, 1.211656}, Vec3{0.000000, 0.000223, 1.211656}, Vec3{0.000000, 0.000299, 1.211656}, Vec3{0.000000, 0.000387, 1.211656}, Vec3{0.000000, 0.000488, 1.211656}, Vec3{0.000000, 0.000602, 1.211656}, Vec3{0.000000, 0.000729, 1.211656}, Vec3{0.000000, 0.000870, 1.211656}, Vec3{0.000000, 0.001024, 1.211656}, Vec3{0.000000, 0.001191, 1.211656}, Vec3{0.000000, 0.001373, 1.211656}, Vec3{0.000000, 0.001569, 1.211656}, Vec3{0.000000, 0.001779, 1.211656}, Vec3{0.000000, 0.002004, 1.211656}, Vec3{0.000000, 0.002243, 1.211656}, Vec3{0.000000, 0.002497, 1.211656}, Vec3{0.000000, 0.002767, 1.211656}, Vec3{0.000000, 0.003051, 1.211656}, Vec3{0.000000, 0.003350, 1.211656}, Vec3{0.000000, 0.003665, 1.211656}, Vec3{0.000000, 0.003995, 1.211656}, Vec3{0.000000, 0.004341, 1.211656}, Vec3{0.000000, 0.004703, 1.211656}, Vec3{0.000000, 0.005080, 1.211656}, Vec3{0.000000, 0.005474, 1.211656}, Vec3{0.000000, 0.005883, 1.211656}, Vec3{0.000000, 0.006309, 1.211656}, Vec3{0.000000, 0.006751, 1.211656}, Vec3{0.000000, 0.007209, 1.211656}, Vec3{0.000000, 0.007683, 1.211656}, Vec3{0.000000, 0.008175, 1.211656}, Vec3{0.000000, 0.008683, 1.211656}, Vec3{0.000000, 0.009207, 1.211656}, Vec3{0.000000, 0.009749, 1.211656}, Vec3{0.000000, 0.010307, 1.211656}, Vec3{0.000000, 0.010883, 1.211656}, Vec3{0.000000, 0.011475, 1.211656}, Vec3{0.000000, 0.012085, 1.211656}, Vec3{0.000000, 0.012712, 1.211656}, Vec3{0.000000, 0.013356, 1.211656}, Vec3{0.000000, 0.014018, 1.211656}, Vec3{0.000000, 0.014697, 1.211656}, Vec3{0.000000, 0.015394, 1.211656}, Vec3{0.000000, 0.016108, 1.211656}, Vec3{0.000000, 0.016840, 1.211656}, Vec3{0.000000, 0.017590, 1.211656}, Vec3{0.000000, 0.018358, 1.211656}, Vec3{0.000000, 0.019143, 1.211656}, Vec3{0.000000, 0.019947, 1.211656}, Vec3{0.000000, 0.020769, 1.211656}, Vec3{0.000000, 0.021608, 1.211656}, Vec3{0.000000, 0.022466, 1.211656}, Vec3{0.000000, 0.023343, 1.211656}, Vec3{0.000000, 0.024237, 1.211656}, Vec3{0.000000, 0.025150, 1.211656}, Vec3{0.000000, 0.026082, 1.211656}, Vec3{0.000000, 0.027032, 1.211656}, Vec3{0.000000, 0.028000, 1.211656}, Vec3{0.000000, 0.028987, 1.211656}, Vec3{0.000000, 0.029993, 1.211656}, Vec3{0.000000, 0.031017, 1.211656}, Vec3{0.000000, 0.032061, 1.211656}, Vec3{0.000000, 0.033123, 1.211656}, Vec3{0.000000, 0.034204, 1.211656}, Vec3{0.000000, 0.035304, 1.211656}, Vec3{0.000000, 0.036423, 1.211656}, Vec3{0.000000, 0.037561, 1.211656}, Vec3{0.000000, 0.038719, 1.211656}, Vec3{0.000000, 0.039895, 1.211656}, Vec3{0.000000, 0.041091, 1.211656}, Vec3{0.000000, 0.042306, 1.211656}, Vec3{0.000000, 0.043540, 1.211656}, Vec3{0.000000, 0.044794, 1.211656}, Vec3{0.000000, 0.046067, 1.211656}, Vec3{0.000000, 0.047360, 1.211656}, Vec3{0.000000, 0.048672, 1.211656}, Vec3{0.000000, 0.050003, 1.211656}, Vec3{0.000000, 0.051355, 1.211656}, Vec3{0.000000, 0.052726, 1.211656}, Vec3{0.000000, 0.054117, 1.211656}, Vec3{0.000000, 0.055527, 1.211656}, Vec3{0.000000, 0.056958, 1.211656}, Vec3{0.000000, 0.058408, 1.211656}, Vec3{0.000000, 0.059878, 1.211656}, Vec3{0.000000, 0.061368, 1.211656}, Vec3{0.000000, 0.062878, 1.211656}, Vec3{0.000000, 0.064408, 1.211656}, Vec3{0.000000, 0.065959, 1.211656}, Vec3{0.000000, 0.067529, 1.211656}, Vec3{0.000000, 0.069120, 1.211656}, Vec3{0.000000, 0.070730, 1.211656}, Vec3{0.000000, 0.072361, 1.211656}, Vec3{0.000000, 0.074013, 1.211656}, Vec3{0.000000, 0.075684, 1.211656}, Vec3{0.000000, 0.077377, 1.211656}, Vec3{0.000000, 0.079089, 1.211656}, Vec3{0.000000, 0.080822, 1.211656}, Vec3{0.000000, 0.082576, 1.211656}, Vec3{0.000000, 0.084350, 1.211656}, Vec3{0.000000, 0.086144, 1.211656}, Vec3{0.000000, 0.087959, 1.211656}, Vec3{0.000000, 0.089795, 1.211656}, Vec3{0.000000, 0.091652, 1.211656}, Vec3{0.000000, 0.093529, 1.211656}, Vec3{0.000000, 0.095427, 1.211656}, Vec3{0.000000, 0.097346, 1.211656}, Vec3{0.000000, 0.099286, 1.211656}, Vec3{0.000000, 0.101247, 1.211656}, Vec3{0.000000, 0.103229, 1.211656}, Vec3{0.000000, 0.105231, 1.211656}, Vec3{0.000000, 0.107255, 1.211656}, Vec3{0.000000, 0.109300, 1.211656}, Vec3{0.000000, 0.111365, 1.211656}, Vec3{0.000000, 0.113452, 1.211656}, Vec3{0.000000, 0.115560, 1.211656}, Vec3{0.000000, 0.117689, 1.211656}, Vec3{0.000000, 0.119840, 1.211656}, Vec3{0.000000, 0.122011, 1.211656}, Vec3{0.000000, 0.124204, 1.211656}, Vec3{0.000000, 0.126419, 1.211656}, Vec3{0.000000, 0.128654, 1.211656}, Vec3{0.000000, 0.130911, 1.211656}, Vec3{0.000000, 0.133190, 1.211656}, Vec3{0.000000, 0.135490, 1.211656}, Vec3{0.000000, 0.137811, 1.211656}, Vec3{0.000000, 0.140154, 1.211656}, Vec3{0.000000, 0.142519, 1.211656}, Vec3{0.000000, 0.144905, 1.211656}, Vec3{0.000000, 0.147313, 1.211656}, Vec3{0.000000, 0.149742, 1.211656}, Vec3{0.000000, 0.152193, 1.211656}, Vec3{0.000000, 0.154666, 1.211656}, Vec3{0.000000, 0.157160, 1.211656}, Vec3{0.000000, 0.159677, 1.211656}, Vec3{0.000000, 0.162215, 1.211656}, Vec3{0.000000, 0.164775, 1.211656}, Vec3{0.000000, 0.167357, 1.211656}, Vec3{0.000000, 0.169961, 1.211656}, Vec3{0.000000, 0.172587, 1.211656}, Vec3{0.000000, 0.175234, 1.211656}, Vec3{0.000000, 0.177904, 1.211656}, Vec3{0.000000, 0.180596, 1.211656}, Vec3{0.000000, 0.183310, 1.211656}, Vec3{0.000000, 0.186045, 1.211656}, Vec3{0.000000, 0.188804, 1.211656}, Vec3{0.000000, 0.191584, 1.211656}, Vec3{0.000000, 0.194386, 1.211656}, Vec3{0.000000, 0.197211, 1.211656}, Vec3{0.000000, 0.200058, 1.211656}, Vec3{0.000000, 0.202927, 1.211656}, Vec3{0.000000, 0.205818, 1.211656}, Vec3{0.000000, 0.208732, 1.211656}, Vec3{0.000000, 0.211668, 1.211656}, Vec3{0.000000, 0.214626, 1.211656}, Vec3{0.000000, 0.217607, 1.211656}, Vec3{0.000000, 0.220611, 1.211656}, Vec3{0.000000, 0.223636, 1.211656}, Vec3{0.000000, 0.226685, 1.211656}, Vec3{0.000000, 0.229755, 1.211656}, Vec3{0.000000, 0.232849, 1.211656}, Vec3{0.000000, 0.235965, 1.211656}, Vec3{0.000000, 0.239103, 1.211656}, Vec3{0.000000, 0.242264, 1.211656}, Vec3{0.000000, 0.245448, 1.211656}, Vec3{0.000000, 0.248655, 1.211656}, Vec3{0.000000, 0.251884, 1.211656}, Vec3{0.000000, 0.255136, 1.211656}, Vec3{0.000000, 0.258411, 1.211656}, Vec3{0.000000, 0.261708, 1.211656}, Vec3{0.000000, 0.265029, 1.211656}, Vec3{0.000000, 0.268372, 1.211656}, Vec3{0.000000, 0.271738, 1.211656}, Vec3{0.000000, 0.275127, 1.211656}, Vec3{0.000000, 0.278539, 1.211656}, Vec3{0.000000, 0.281974, 1.211656}, Vec3{0.000000, 0.285432, 1.211656}, Vec3{0.000000, 0.288913, 1.211656}, Vec3{0.000000, 0.292416, 1.211656}, Vec3{0.000000, 0.295943, 1.211656}, Vec3{0.000000, 0.299493, 1.211656}, Vec3{0.000000, 0.303066, 1.211656}, Vec3{0.000000, 0.306663, 1.211656}, Vec3{0.000000, 0.310282, 1.211656}, Vec3{0.000000, 0.313925, 1.211656}, Vec3{0.000000, 0.317590, 1.211656}, Vec3{0.000000, 0.321279, 1.211656}, Vec3{0.000000, 0.324992, 1.211656}, Vec3{0.000000, 0.328727, 1.211656}, Vec3{0.000000, 0.332486, 1.211656}, Vec3{0.000000, 0.336268, 1.211656}, Vec3{0.000000, 0.340073, 1.211656}, Vec3{0.000000, 0.343902, 1.211656}, Vec3{0.000000, 0.347754, 1.211656}, Vec3{0.000000, 0.351630, 1.211656}, Vec3{0.000000, 0.355529, 1.211656}, Vec3{0.000000, 0.359452, 1.211656}, Vec3{0.000000, 0.363398, 1.211656}, Vec3{0.000000, 0.367367, 1.211656}, Vec3{0.000000, 0.371360, 1.211656}, Vec3{0.000000, 0.375377, 1.211656}, Vec3{0.000000, 0.379417, 1.211656}, Vec3{0.000000, 0.383481, 1.211656}, Vec3{0.000000, 0.387569, 1.211656}, Vec3{0.000000, 0.391680, 1.211656}, Vec3{0.000000, 0.395815, 1.211656}, Vec3{0.000000, 0.399973, 1.211656}, Vec3{0.000000, 0.404155, 1.211656}, Vec3{0.000000, 0.408361, 1.211656}, Vec3{0.000000, 0.412591, 1.211656}, Vec3{0.000000, 0.416844, 1.211656}, Vec3{0.000000, 0.421122, 1.211656}, Vec3{0.000000, 0.425423, 1.211656}, Vec3{0.000000, 0.429748, 1.211656}, Vec3{0.000000, 0.434097, 1.211656}, Vec3{0.000000, 0.438469, 1.211656}, Vec3{0.000000, 0.442866, 1.211656}, Vec3{0.000000, 0.447287, 1.211656}, Vec3{0.000000, 0.451731, 1.211656}, Vec3{0.000000, 0.456200, 1.211656}, Vec3{0.000000, 0.460692, 1.211656}, Vec3{0.000000, 0.465209, 1.211656}, Vec3{0.000000, 0.469749, 1.211656}, Vec3{0.000000, 0.474314, 1.211656}, Vec3{0.000000, 0.478903, 1.211656}, Vec3{0.000000, 0.483516, 1.211656}, Vec3{0.000000, 0.488153, 1.211656}, Vec3{0.000000, 0.492814, 1.211656}, Vec3{0.000000, 0.497499, 1.211656}, Vec3{0.000000, 0.502209, 1.211656}, Vec3{0.000000, 0.506942, 1.211656}, Vec3{0.000000, 0.511700, 1.211656}, Vec3{0.000000, 0.516483, 1.211656}, Vec3{0.000000, 0.521289, 1.211656}, Vec3{0.000000, 0.526120, 1.211656}, Vec3{0.000000, 0.530975, 1.211656}, Vec3{0.000000, 0.535854, 1.211656}, Vec3{0.000000, 0.540758, 1.211656}, Vec3{0.000000, 0.545686, 1.211656}, Vec3{0.000000, 0.550639, 1.211656}, Vec3{0.000000, 0.555616, 1.211656}, Vec3{0.000000, 0.560617, 1.211656}, Vec3{0.000000, 0.565643, 1.211656}, Vec3{0.000000, 0.570694, 1.211656}, Vec3{0.000000, 0.575768, 1.211656}, Vec3{0.000000, 0.580868, 1.211656}, Vec3{0.000000, 0.585992, 1.211656}, Vec3{0.000000, 0.591140, 1.211656}, Vec3{0.000000, 0.596313, 1.211656}, Vec3{0.000000, 0.601511, 1.211656}, Vec3{0.000000, 0.606733, 1.211656}, Vec3{0.000000, 0.606733, 1.201227}, Vec3{0.000000, 0.606733, 1.190847}, Vec3{0.000000, 0.606733, 1.180516}, Vec3{0.000000, 0.606733, 1.170235}, Vec3{0.000000, 0.606733, 1.160002}, Vec3{0.000000, 0.606733, 1.149819}, Vec3{0.000000, 0.606733, 1.139684}, Vec3{0.000000, 0.606733, 1.129599}, Vec3{0.000000, 0.606733, 1.119562}, Vec3{0.000000, 0.606733, 1.109574}, Vec3{0.000000, 0.606733, 1.099635}, Vec3{0.000000, 0.606733, 1.089744}, Vec3{0.000000, 0.606733, 1.079903}, Vec3{0.000000, 0.606733, 1.070110}, Vec3{0.000000, 0.606733, 1.060365}, Vec3{0.000000, 0.606733, 1.050670}, Vec3{0.000000, 0.606733, 1.041023}, Vec3{0.000000, 0.606733, 1.031424}, Vec3{0.000000, 0.606733, 1.021874}, Vec3{0.000000, 0.606733, 1.012372}, Vec3{0.000000, 0.606733, 1.002919}, Vec3{0.000000, 0.606733, 0.993514}, Vec3{0.000000, 0.606733, 0.984157}, Vec3{0.000000, 0.606733, 0.974849}, Vec3{0.000000, 0.606733, 0.965589}, Vec3{0.000000, 0.606733, 0.956376}, Vec3{0.000000, 0.606733, 0.947213}, Vec3{0.000000, 0.606733, 0.938097}, Vec3{0.000000, 0.606733, 0.929029}, Vec3{0.000000, 0.606733, 0.920010}, Vec3{0.000000, 0.606733, 0.911038}, Vec3{0.000000, 0.606733, 0.902114}, Vec3{0.000000, 0.606733, 0.893238}, Vec3{0.000000, 0.606733, 0.884410}, Vec3{0.000000, 0.606733, 0.875630}, Vec3{0.000000, 0.606733, 0.866898}, Vec3{0.000000, 0.606733, 0.858213}, Vec3{0.000000, 0.606733, 0.849576}, Vec3{0.000000, 0.606733, 0.840987}, Vec3{0.000000, 0.606733, 0.832445}, Vec3{0.000000, 0.606733, 0.823951}, Vec3{0.000000, 0.606733, 0.815504}, Vec3{0.000000, 0.606733, 0.807104}, Vec3{0.000000, 0.606733, 0.798753}, Vec3{0.000000, 0.606733, 0.790448}, Vec3{0.000000, 0.606733, 0.782191}, Vec3{0.000000, 0.606733, 0.773981}, Vec3{0.000000, 0.606733, 0.765818}, Vec3{0.000000, 0.606733, 0.757703}, Vec3{0.000000, 0.606733, 0.749634}, Vec3{0.000000, 0.606733, 0.741613}, Vec3{0.000000, 0.606733, 0.733639}, Vec3{0.000000, 0.606733, 0.725711}, Vec3{0.000000, 0.606733, 0.717831}, Vec3{0.000000, 0.606733, 0.709998}, Vec3{0.000000, 0.606733, 0.702211}, Vec3{0.000000, 0.606733, 0.694471}, Vec3{0.000000, 0.606733, 0.686778}, Vec3{0.000000, 0.606733, 0.679132}, Vec3{0.000000, 0.606733, 0.671532}, Vec3{0.000000, 0.606733, 0.663980}, Vec3{0.000000, 0.606733, 0.656473}, Vec3{0.000000, 0.606733, 0.649013}, Vec3{0.000000, 0.606733, 0.641600}, Vec3{0.000000, 0.606733, 0.634233}, Vec3{0.000000, 0.606733, 0.626912}, Vec3{0.000000, 0.606733, 0.619638}, Vec3{0.000000, 0.606733, 0.612410}, Vec3{0.000000, 0.606733, 0.605228}, Vec3{0.000000, 0.606733, 0.598093}, Vec3{0.000000, 0.606733, 0.591004}, Vec3{0.000000, 0.606733, 0.583960}, Vec3{0.000000, 0.606733, 0.576963}, Vec3{0.000000, 0.606733, 0.570012}, Vec3{0.000000, 0.606733, 0.563106}, Vec3{0.000000, 0.606733, 0.556247}, Vec3{0.000000, 0.606733, 0.549433}, Vec3{0.000000, 0.606733, 0.542665}, Vec3{0.000000, 0.606733, 0.535943}, Vec3{0.000000, 0.606733, 0.529267}, Vec3{0.000000, 0.606733, 0.522636}, Vec3{0.000000, 0.606733, 0.516051}, Vec3{0.000000, 0.606733, 0.509511}, Vec3{0.000000, 0.606733, 0.503017}, Vec3{0.000000, 0.606733, 0.496568}, Vec3{0.000000, 0.606733, 0.490164}, Vec3{0.000000, 0.606733, 0.483806}, Vec3{0.000000, 0.606733, 0.477493}, Vec3{0.000000, 0.606733, 0.471225}, Vec3{0.000000, 0.606733, 0.465003}, Vec3{0.000000, 0.606733, 0.458825}, Vec3{0.000000, 0.606733, 0.452693}, Vec3{0.000000, 0.606733, 0.446605}, Vec3{0.000000, 0.606733, 0.440563}, Vec3{0.000000, 0.606733, 0.434565}, Vec3{0.000000, 0.606733, 0.428612}, Vec3{0.000000, 0.606733, 0.422704}, Vec3{0.000000, 0.606733, 0.416841}, Vec3{0.000000, 0.606733, 0.411022}, Vec3{0.000000, 0.606733, 0.405248}, Vec3{0.000000, 0.606733, 0.399518}, Vec3{0.000000, 0.606733, 0.393833}, Vec3{0.000000, 0.606733, 0.388192}, Vec3{0.000000, 0.606733, 0.382596}, Vec3{0.000000, 0.606733, 0.377044}, Vec3{0.000000, 0.606733, 0.371536}, Vec3{0.000000, 0.606733, 0.366072}, Vec3{0.000000, 0.606733, 0.360653}, Vec3{0.000000, 0.606733, 0.355277}, Vec3{0.000000, 0.606733, 0.349946}, Vec3{0.000000, 0.606733, 0.344658}, Vec3{0.000000, 0.606733, 0.339414}, Vec3{0.000000, 0.606733, 0.334214}, Vec3{0.000000, 0.606733, 0.329058}, Vec3{0.000000, 0.606733, 0.323946}, Vec3{0.000000, 0.606733, 0.318877}, Vec3{0.000000, 0.606733, 0.313852}, Vec3{0.000000, 0.606733, 0.308870}, Vec3{0.000000, 0.606733, 0.303932}, Vec3{0.000000, 0.606733, 0.299037}, Vec3{0.000000, 0.606733, 0.294186}, Vec3{0.000000, 0.606733, 0.289377}, Vec3{0.000000, 0.606733, 0.284612}, Vec3{0.000000, 0.606733, 0.279890}, Vec3{0.000000, 0.606733, 0.275211}, Vec3{0.000000, 0.606733, 0.270575}, Vec3{0.000000, 0.606733, 0.265982}, Vec3{0.000000, 0.606733, 0.261432}, Vec3{0.000000, 0.606733, 0.256925}, Vec3{0.000000, 0.606733, 0.252460}, Vec3{0.000000, 0.606733, 0.248038}, Vec3{0.000000, 0.606733, 0.243659}, Vec3{0.000000, 0.606733, 0.239322}, Vec3{0.000000, 0.606733, 0.235027}, Vec3{0.000000, 0.606733, 0.230775}, Vec3{0.000000, 0.606733, 0.226566}, Vec3{0.000000, 0.606733, 0.222398}, Vec3{0.000000, 0.606733, 0.218273}, Vec3{0.000000, 0.606733, 0.214190}, Vec3{0.000000, 0.606733, 0.210148}, Vec3{0.000000, 0.606733, 0.206149}, Vec3{0.000000, 0.606733, 0.202192}, Vec3{0.000000, 0.606733, 0.198276}, Vec3{0.000000, 0.606733, 0.194402}, Vec3{0.000000, 0.606733, 0.190570}, Vec3{0.000000, 0.606733, 0.186779}, Vec3{0.000000, 0.606733, 0.183030}, Vec3{0.000000, 0.606733, 0.179323}, Vec3{0.000000, 0.606733, 0.175656}, Vec3{0.000000, 0.606733, 0.172031}, Vec3{0.000000, 0.606733, 0.168447}, Vec3{0.000000, 0.606733, 0.164905}, Vec3{0.000000, 0.606733, 0.161403}, Vec3{0.000000, 0.606733, 0.157942}, Vec3{0.000000, 0.606733, 0.154522}, Vec3{0.000000, 0.606733, 0.151143}, Vec3{0.000000, 0.606733, 0.147805}, Vec3{0.000000, 0.606733, 0.144507}, Vec3{0.000000, 0.606733, 0.141250}, Vec3{0.000000, 0.606733, 0.138033}, Vec3{0.000000, 0.606733, 0.134857}, Vec3{0.000000, 0.606733, 0.131720}, Vec3{0.000000, 0.606733, 0.128625}, Vec3{0.000000, 0.606733, 0.125569}, Vec3{0.000000, 0.606733, 0.122553}, Vec3{0.000000, 0.606733, 0.119577}, Vec3{0.000000, 0.606733, 0.116641}, Vec3{0.000000, 0.606733, 0.113745}, Vec3{0.000000, 0.606733, 0.110889}, Vec3{0.000000, 0.606733, 0.108072}, Vec3{0.000000, 0.606733, 0.105294}, Vec3{0.000000, 0.606733, 0.102556}, Vec3{0.000000, 0.606733, 0.099858}, Vec3{0.000000, 0.606733, 0.097198}, Vec3{0.000000, 0.606733, 0.094578}, Vec3{0.000000, 0.606733, 0.091996}, Vec3{0.000000, 0.606733, 0.089454}, Vec3{0.000000, 0.606733, 0.086950}, Vec3{0.000000, 0.606733, 0.084485}, Vec3{0.000000, 0.606733, 0.082059}, Vec3{0.000000, 0.606733, 0.079671}, Vec3{0.000000, 0.606733, 0.077322}, Vec3{0.000000, 0.606733, 0.075011}, Vec3{0.000000, 0.606733, 0.072738}, Vec3{0.000000, 0.606733, 0.070503}, Vec3{0.000000, 0.606733, 0.068306}, Vec3{0.000000, 0.606733, 0.066147}, Vec3{0.000000, 0.606733, 0.064026}, Vec3{0.000000, 0.606733, 0.061942}, Vec3{0.000000, 0.606733, 0.059896}, Vec3{0.000000, 0.606733, 0.057888}, Vec3{0.000000, 0.606733, 0.055917}, Vec3{0.000000, 0.606733, 0.053982}, Vec3{0.000000, 0.606733, 0.052085}, Vec3{0.000000, 0.606733, 0.050225}, Vec3{0.000000, 0.606733, 0.048402}, Vec3{0.000000, 0.606733, 0.046616}, Vec3{0.000000, 0.606733, 0.044866}, Vec3{0.000000, 0.606733, 0.043152}, Vec3{0.000000, 0.606733, 0.041475}, Vec3{0.000000, 0.606733, 0.039834}, Vec3{0.000000, 0.606733, 0.038229}, Vec3{0.000000, 0.606733, 0.036660}, Vec3{0.000000, 0.606733, 0.035127}, Vec3{0.000000, 0.606733, 0.033630}, Vec3{0.000000, 0.606733, 0.032168}, Vec3{0.000000, 0.606733, 0.030741}, Vec3{0.000000, 0.606733, 0.029350}, Vec3{0.000000, 0.606733, 0.027994}, Vec3{0.000000, 0.606733, 0.026672}, Vec3{0.000000, 0.606733, 0.025386}, Vec3{0.000000, 0.606733, 0.024134}, Vec3{0.000000, 0.606733, 0.022916}, Vec3{0.000000, 0.606733, 0.021733}, Vec3{0.000000, 0.606733, 0.020584}, Vec3{0.000000, 0.606733, 0.019469}, Vec3{0.000000, 0.606733, 0.018387}, Vec3{0.000000, 0.606733, 0.017339}, Vec3{0.000000, 0.606733, 0.016325}, Vec3{0.000000, 0.606733, 0.015344}, Vec3{0.000000, 0.606733, 0.014396}, Vec3{0.000000, 0.606733, 0.013481}, Vec3{0.000000, 0.606733, 0.012599}, Vec3{0.000000, 0.606733, 0.011749}, Vec3{0.000000, 0.606733, 0.010931}, Vec3{0.000000, 0.606733, 0.010145}, Vec3{0.000000, 0.606733, 0.009392}, Vec3{0.000000, 0.606733, 0.008669}, Vec3{0.000000, 0.606733, 0.007979}, Vec3{0.000000, 0.606733, 0.007319}, Vec3{0.000000, 0.606733, 0.006690}, Vec3{0.000000, 0.606733, 0.006092}, Vec3{0.000000, 0.606733, 0.005525}, Vec3{0.000000, 0.606733, 0.004987}, Vec3{0.000000, 0.606733, 0.004480}, Vec3{0.000000, 0.606733, 0.004002}, Vec3{0.000000, 0.606733, 0.003553}, Vec3{0.000000, 0.606733, 0.003133}, Vec3{0.000000, 0.606733, 0.002742}, Vec3{0.000000, 0.606733, 0.002379}, Vec3{0.000000, 0.606733, 0.002044}, Vec3{0.000000, 0.606733, 0.001736}, Vec3{0.000000, 0.606733, 0.001456}, Vec3{0.000000, 0.606733, 0.001202}, Vec3{0.000000, 0.606733, 0.000975}, Vec3{0.000000, 0.606733, 0.000773}, Vec3{0.000000, 0.606733, 0.000597}, Vec3{0.000000, 0.606733, 0.000445}, Vec3{0.000000, 0.606733, 0.000317}, Vec3{0.000000, 0.606733, 0.000212}, Vec3{0.000000, 0.606733, 0.000130}, Vec3{0.000000, 0.606733, 0.000069}, Vec3{0.000000, 0.606733, 0.000028}, Vec3{0.000000, 0.606733, 0.000006}, Vec3{0.000000, 0.606733, 0.000000}, Vec3{0.000005, 0.606733, 0.000000}, Vec3{0.000023, 0.606733, 0.000000}, Vec3{0.000057, 0.606733, 0.000000}, Vec3{0.000107, 0.606733, 0.000000}, Vec3{0.000175, 0.606733, 0.000000}, Vec3{0.000262, 0.606733, 0.000000}, Vec3{0.000367, 0.606733, 0.000000}, Vec3{0.000493, 0.606733, 0.000000}, Vec3{0.000638, 0.606733, 0.000000}, Vec3{0.000805, 0.606733, 0.000000}, Vec3{0.000992, 0.606733, 0.000000}, Vec3{0.001202, 0.606733, 0.000000}, Vec3{0.001433, 0.606733, 0.000000}, Vec3{0.001687, 0.606733, 0.000000}, Vec3{0.001963, 0.606733, 0.000000}, Vec3{0.002263, 0.606733, 0.000000}, Vec3{0.002586, 0.606733, 0.000000}, Vec3{0.002932, 0.606733, 0.000000}, Vec3{0.003303, 0.606733, 0.000000}, Vec3{0.003697, 0.606733, 0.000000}, Vec3{0.004116, 0.606733, 0.000000}, Vec3{0.004560, 0.606733, 0.000000}, Vec3{0.005028, 0.606733, 0.000000}, Vec3{0.005522, 0.606733, 0.000000}, Vec3{0.006041, 0.606733, 0.000000}, Vec3{0.006585, 0.606733, 0.000000}, Vec3{0.007155, 0.606733, 0.000000}, Vec3{0.007751, 0.606733, 0.000000}, Vec3{0.008373, 0.606733, 0.000000}, Vec3{0.009021, 0.606733, 0.000000}, Vec3{0.009696, 0.606733, 0.000000}, Vec3{0.010398, 0.606733, 0.000000}, Vec3{0.011126, 0.606733, 0.000000}, Vec3{0.011881, 0.606733, 0.000000}, Vec3{0.012664, 0.606733, 0.000000}, Vec3{0.013473, 0.606733, 0.000000}, Vec3{0.014311, 0.606733, 0.000000}, Vec3{0.015175, 0.606733, 0.000000}, Vec3{0.016068, 0.606733, 0.000000}, Vec3{0.016988, 0.606733, 0.000000}, Vec3{0.017936, 0.606733, 0.000000}, Vec3{0.018913, 0.606733, 0.000000}, Vec3{0.019918, 0.606733, 0.000000}, Vec3{0.020951, 0.606733, 0.000000}, Vec3{0.022013, 0.606733, 0.000000}, Vec3{0.023104, 0.606733, 0.000000}, Vec3{0.024223, 0.606733, 0.000000}, Vec3{0.025371, 0.606733, 0.000000}, Vec3{0.026549, 0.606733, 0.000000}, Vec3{0.027755, 0.606733, 0.000000}, Vec3{0.028991, 0.606733, 0.000000}, Vec3{0.030257, 0.606733, 0.000000}, Vec3{0.031551, 0.606733, 0.000000}, Vec3{0.032876, 0.606733, 0.000000}, Vec3{0.034230, 0.606733, 0.000000}, Vec3{0.035614, 0.606733, 0.000000}, Vec3{0.037029, 0.606733, 0.000000}, Vec3{0.038473, 0.606733, 0.000000}, Vec3{0.039947, 0.606733, 0.000000}, Vec3{0.041452, 0.606733, 0.000000}, Vec3{0.042987, 0.606733, 0.000000}, Vec3{0.044553, 0.606733, 0.000000}, Vec3{0.046149, 0.606733, 0.000000}, Vec3{0.047776, 0.606733, 0.000000}, Vec3{0.049433, 0.606733, 0.000000}, Vec3{0.051122, 0.606733, 0.000000}, Vec3{0.052842, 0.606733, 0.000000}, Vec3{0.054592, 0.606733, 0.000000}, Vec3{0.056374, 0.606733, 0.000000}, Vec3{0.058187, 0.606733, 0.000000}, Vec3{0.060032, 0.606733, 0.000000}, Vec3{0.061907, 0.606733, 0.000000}, Vec3{0.063815, 0.606733, 0.000000}, Vec3{0.065754, 0.606733, 0.000000}, Vec3{0.067725, 0.606733, 0.000000}, Vec3{0.069727, 0.606733, 0.000000}, Vec3{0.071761, 0.606733, 0.000000}, Vec3{0.073828, 0.606733, 0.000000}, Vec3{0.075926, 0.606733, 0.000000}, Vec3{0.078057, 0.606733, 0.000000}, Vec3{0.080219, 0.606733, 0.000000}, Vec3{0.082414, 0.606733, 0.000000}, Vec3{0.084642, 0.606733, 0.000000}, Vec3{0.086901, 0.606733, 0.000000}, Vec3{0.089194, 0.606733, 0.000000}, Vec3{0.091518, 0.606733, 0.000000}, Vec3{0.093876, 0.606733, 0.000000}, Vec3{0.096266, 0.606733, 0.000000}, Vec3{0.098689, 0.606733, 0.000000}, Vec3{0.101145, 0.606733, 0.000000}, Vec3{0.103634, 0.606733, 0.000000}, Vec3{0.106156, 0.606733, 0.000000}, Vec3{0.108711, 0.606733, 0.000000}, Vec3{0.111299, 0.606733, 0.000000}, Vec3{0.113921, 0.606733, 0.000000}, Vec3{0.116576, 0.606733, 0.000000}, Vec3{0.119264, 0.606733, 0.000000}, Vec3{0.121986, 0.606733, 0.000000}, Vec3{0.124741, 0.606733, 0.000000}, Vec3{0.127530, 0.606733, 0.000000}, Vec3{0.130352, 0.606733, 0.000000}, Vec3{0.133209, 0.606733, 0.000000}, Vec3{0.136099, 0.606733, 0.000000}, Vec3{0.139022, 0.606733, 0.000000}, Vec3{0.141980, 0.606733, 0.000000}, Vec3{0.144972, 0.606733, 0.000000}, Vec3{0.147998, 0.606733, 0.000000}, Vec3{0.151058, 0.606733, 0.000000}, Vec3{0.154152, 0.606733, 0.000000}, Vec3{0.157281, 0.606733, 0.000000}, Vec3{0.160444, 0.606733, 0.000000}, Vec3{0.163641, 0.606733, 0.000000}, Vec3{0.166872, 0.606733, 0.000000}, Vec3{0.170138, 0.606733, 0.000000}, Vec3{0.173439, 0.606733, 0.000000}, Vec3{0.176774, 0.606733, 0.000000}, Vec3{0.180144, 0.606733, 0.000000}, Vec3{0.183549, 0.606733, 0.000000}, Vec3{0.186989, 0.606733, 0.000000}, Vec3{0.190463, 0.606733, 0.000000}, Vec3{0.193972, 0.606733, 0.000000}, Vec3{0.197516, 0.606733, 0.000000}, Vec3{0.201096, 0.606733, 0.000000}, Vec3{0.204710, 0.606733, 0.000000}, Vec3{0.208360, 0.606733, 0.000000}, Vec3{0.212044, 0.606733, 0.000000}, Vec3{0.215764, 0.606733, 0.000000}, Vec3{0.219520, 0.606733, 0.000000}, Vec3{0.223310, 0.606733, 0.000000}, Vec3{0.227137, 0.606733, 0.000000}, Vec3{0.230998, 0.606733, 0.000000}, Vec3{0.234895, 0.606733, 0.000000}, Vec3{0.238828, 0.606733, 0.000000}, Vec3{0.242796, 0.606733, 0.000000}, Vec3{0.246800, 0.606733, 0.000000}, Vec3{0.250840, 0.606733, 0.000000}, Vec3{0.254916, 0.606733, 0.000000}, Vec3{0.259027, 0.606733, 0.000000}, Vec3{0.263175, 0.606733, 0.000000}, Vec3{0.267358, 0.606733, 0.000000}, Vec3{0.271577, 0.606733, 0.000000}, Vec3{0.275833, 0.606733, 0.000000}, Vec3{0.280124, 0.606733, 0.000000}, Vec3{0.284452, 0.606733, 0.000000}, Vec3{0.288816, 0.606733, 0.000000}, Vec3{0.293216, 0.606733, 0.000000}, Vec3{0.297653, 0.606733, 0.000000}, Vec3{0.302126, 0.606733, 0.000000}, Vec3{0.306635, 0.606733, 0.000000}, Vec3{0.311181, 0.606733, 0.000000}, Vec3{0.315763, 0.606733, 0.000000}, Vec3{0.320382, 0.606733, 0.000000}, Vec3{0.325037, 0.606733, 0.000000}, Vec3{0.329729, 0.606733, 0.000000}, Vec3{0.334458, 0.606733, 0.000000}, Vec3{0.339223, 0.606733, 0.000000}, Vec3{0.344026, 0.606733, 0.000000}, Vec3{0.348865, 0.606733, 0.000000}, Vec3{0.353741, 0.606733, 0.000000}, Vec3{0.358654, 0.606733, 0.000000}, Vec3{0.363604, 0.606733, 0.000000}, Vec3{0.368591, 0.606733, 0.000000}, Vec3{0.373615, 0.606733, 0.000000}, Vec3{0.378676, 0.606733, 0.000000}, Vec3{0.383775, 0.606733, 0.000000}, Vec3{0.388910, 0.606733, 0.000000}, Vec3{0.394083, 0.606733, 0.000000}, Vec3{0.399293, 0.606733, 0.000000}, Vec3{0.404541, 0.606733, 0.000000}, Vec3{0.409826, 0.606733, 0.000000}, Vec3{0.415148, 0.606733, 0.000000}, Vec3{0.420508, 0.606733, 0.000000}, Vec3{0.425905, 0.606733, 0.000000}, Vec3{0.431340, 0.606733, 0.000000}, Vec3{0.436813, 0.606733, 0.000000}, Vec3{0.442323, 0.606733, 0.000000}, Vec3{0.447871, 0.606733, 0.000000}, Vec3{0.453456, 0.606733, 0.000000}, Vec3{0.459080, 0.606733, 0.000000}, Vec3{0.464741, 0.606733, 0.000000}, Vec3{0.470440, 0.606733, 0.000000}, Vec3{0.476177, 0.606733, 0.000000}, Vec3{0.481952, 0.606733, 0.000000}, Vec3{0.487765, 0.606733, 0.000000}, Vec3{0.493616, 0.606733, 0.000000}, Vec3{0.499505, 0.606733, 0.000000}, Vec3{0.505432, 0.606733, 0.000000}, Vec3{0.511398, 0.606733, 0.000000}, Vec3{0.517401, 0.606733, 0.000000}, Vec3{0.523443, 0.606733, 0.000000}, Vec3{0.529523, 0.606733, 0.000000}, Vec3{0.535642, 0.606733, 0.000000}, Vec3{0.541798, 0.606733, 0.000000}, Vec3{0.547994, 0.606733, 0.000000}, Vec3{0.554227, 0.606733, 0.000000}, Vec3{0.560499, 0.606733, 0.000000}, Vec3{0.566810, 0.606733, 0.000000}, Vec3{0.573159, 0.606733, 0.000000}, Vec3{0.579547, 0.606733, 0.000000}, Vec3{0.585973, 0.606733, 0.000000}, Vec3{0.592438, 0.606733, 0.000000}, Vec3{0.598942, 0.606733, 0.000000}, Vec3{0.605484, 0.606733, 0.000000}, Vec3{0.612066, 0.606733, 0.000000}, Vec3{0.618686, 0.606733, 0.000000}, Vec3{0.625345, 0.606733, 0.000000}, Vec3{0.632043, 0.606733, 0.000000}, Vec3{0.638779, 0.606733, 0.000000}, Vec3{0.645555, 0.606733, 0.000000}, Vec3{0.652370, 0.606733, 0.000000}, Vec3{0.659224, 0.606733, 0.000000}, Vec3{0.666117, 0.606733, 0.000000}, Vec3{0.673049, 0.606733, 0.000000}, Vec3{0.680020, 0.606733, 0.000000}, Vec3{0.687031, 0.606733, 0.000000}, Vec3{0.694081, 0.606733, 0.000000}, Vec3{0.701169, 0.606733, 0.000000}, Vec3{0.708298, 0.606733, 0.000000}, Vec3{0.715465, 0.606733, 0.000000}, Vec3{0.722672, 0.606733, 0.000000}, Vec3{0.729919, 0.606733, 0.000000}, Vec3{0.737205, 0.606733, 0.000000}, Vec3{0.744530, 0.606733, 0.000000}, Vec3{0.751895, 0.606733, 0.000000}, Vec3{0.759300, 0.606733, 0.000000}, Vec3{0.766744, 0.606733, 0.000000}, Vec3{0.774227, 0.606733, 0.000000}, Vec3{0.781751, 0.606733, 0.000000}, Vec3{0.789314, 0.606733, 0.000000}, Vec3{0.796917, 0.606733, 0.000000}, Vec3{0.804559, 0.606733, 0.000000}, Vec3{0.812241, 0.606733, 0.000000}, Vec3{0.819964, 0.606733, 0.000000}, Vec3{0.827726, 0.606733, 0.000000}, Vec3{0.835528, 0.606733, 0.000000}, Vec3{0.843370, 0.606733, 0.000000}, Vec3{0.851252, 0.606733, 0.000000}, Vec3{0.859174, 0.606733, 0.000000}, Vec3{0.867136, 0.606733, 0.000000}, Vec3{0.875138, 0.606733, 0.000000}, Vec3{0.883180, 0.606733, 0.000000}, Vec3{0.891262, 0.606733, 0.000000}, Vec3{0.899384, 0.606733, 0.000000}, Vec3{0.907547, 0.606733, 0.000000}, Vec3{0.915750, 0.606733, 0.000000}, Vec3{0.923993, 0.606733, 0.000000}, Vec3{0.932277, 0.606733, 0.000000}, Vec3{0.940601, 0.606733, 0.000000}, Vec3{0.948965, 0.606733, 0.000000}, Vec3{0.957370, 0.606733, 0.000000}, Vec3{0.965815, 0.606733, 0.000000}, Vec3{0.974300, 0.606733, 0.000000}, Vec3{0.982826, 0.606733, 0.000000}, Vec3{0.991393, 0.606733, 0.000000}, Vec3{1.000000, 0.606733, 0.000000}, Vec3{1.000000, 0.601511, 0.000000}, Vec3{1.000000, 0.596313, 0.000000}, Vec3{1.000000, 0.591140, 0.000000}, Vec3{1.000000, 0.585992, 0.000000}, Vec3{1.000000, 0.580868, 0.000000}, Vec3{1.000000, 0.575768, 0.000000}, Vec3{1.000000, 0.570694, 0.000000}, Vec3{1.000000, 0.565643, 0.000000}, Vec3{1.000000, 0.560617, 0.000000}, Vec3{1.000000, 0.555616, 0.000000}, Vec3{1.000000, 0.550639, 0.000000}, Vec3{1.000000, 0.545686, 0.000000}, Vec3{1.000000, 0.540758, 0.000000}, Vec3{1.000000, 0.535854, 0.000000}, Vec3{1.000000, 0.530975, 0.000000}, Vec3{1.000000, 0.526120, 0.000000}, Vec3{1.000000, 0.521289, 0.000000}, Vec3{1.000000, 0.516483, 0.000000}, Vec3{1.000000, 0.511700, 0.000000}, Vec3{1.000000, 0.506942, 0.000000}, Vec3{1.000000, 0.502209, 0.000000}, Vec3{1.000000, 0.497499, 0.000000}, Vec3{1.000000, 0.492814, 0.000000}, Vec3{1.000000, 0.488153, 0.000000}, Vec3{1.000000, 0.483516, 0.000000}, Vec3{1.000000, 0.478903, 0.000000}, Vec3{1.000000, 0.474314, 0.000000}, Vec3{1.000000, 0.469749, 0.000000}, Vec3{1.000000, 0.465209, 0.000000}, Vec3{1.000000, 0.460692, 0.000000}, Vec3{1.000000, 0.456200, 0.000000}, Vec3{1.000000, 0.451731, 0.000000}, Vec3{1.000000, 0.447287, 0.000000}, Vec3{1.000000, 0.442866, 0.000000}, Vec3{1.000000, 0.438469, 0.000000}, Vec3{1.000000, 0.434097, 0.000000}, Vec3{1.000000, 0.429748, 0.000000}, Vec3{1.000000, 0.425423, 0.000000}, Vec3{1.000000, 0.421122, 0.000000}, Vec3{1.000000, 0.416844, 0.000000}, Vec3{1.000000, 0.412591, 0.000000}, Vec3{1.000000, 0.408361, 0.000000}, Vec3{1.000000, 0.404155, 0.000000}, Vec3{1.000000, 0.399973, 0.000000}, Vec3{1.000000, 0.395815, 0.000000}, Vec3{1.000000, 0.391680, 0.000000}, Vec3{1.000000, 0.387569, 0.000000}, Vec3{1.000000, 0.383481, 0.000000}, Vec3{1.000000, 0.379417, 0.000000}, Vec3{1.000000, 0.375377, 0.000000}, Vec3{1.000000, 0.371360, 0.000000}, Vec3{1.000000, 0.367367, 0.000000}, Vec3{1.000000, 0.363398, 0.000000}, Vec3{1.000000, 0.359452, 0.000000}, Vec3{1.000000, 0.355529, 0.000000}, Vec3{1.000000, 0.351630, 0.000000}, Vec3{1.000000, 0.347754, 0.000000}, Vec3{1.000000, 0.343902, 0.000000}, Vec3{1.000000, 0.340073, 0.000000}, Vec3{1.000000, 0.336268, 0.000000}, Vec3{1.000000, 0.332486, 0.000000}, Vec3{1.000000, 0.328727, 0.000000}, Vec3{1.000000, 0.324992, 0.000000}, Vec3{1.000000, 0.321279, 0.000000}, Vec3{1.000000, 0.317590, 0.000000}, Vec3{1.000000, 0.313925, 0.000000}, Vec3{1.000000, 0.310282, 0.000000}, Vec3{1.000000, 0.306663, 0.000000}, Vec3{1.000000, 0.303066, 0.000000}, Vec3{1.000000, 0.299493, 0.000000}, Vec3{1.000000, 0.295943, 0.000000}, Vec3{1.000000, 0.292416, 0.000000}, Vec3{1.000000, 0.288913, 0.000000}, Vec3{1.000000, 0.285432, 0.000000}, Vec3{1.000000, 0.281974, 0.000000}, Vec3{1.000000, 0.278539, 0.000000}, Vec3{1.000000, 0.275127, 0.000000}, Vec3{1.000000, 0.271738, 0.000000}, Vec3{1.000000, 0.268372, 0.000000}, Vec3{1.000000, 0.265029, 0.000000}, Vec3{1.000000, 0.261708, 0.000000}, Vec3{1.000000, 0.258411, 0.000000}, Vec3{1.000000, 0.255136, 0.000000}, Vec3{1.000000, 0.251884, 0.000000}, Vec3{1.000000, 0.248655, 0.000000}, Vec3{1.000000, 0.245448, 0.000000}, Vec3{1.000000, 0.242264, 0.000000}, Vec3{1.000000, 0.239103, 0.000000}, Vec3{1.000000, 0.235965, 0.000000}, Vec3{1.000000, 0.232849, 0.000000}, Vec3{1.000000, 0.229755, 0.000000}, Vec3{1.000000, 0.226685, 0.000000}, Vec3{1.000000, 0.223636, 0.000000}, Vec3{1.000000, 0.220611, 0.000000}, Vec3{1.000000, 0.217607, 0.000000}, Vec3{1.000000, 0.214626, 0.000000}, Vec3{1.000000, 0.211668, 0.000000}, Vec3{1.000000, 0.208732, 0.000000}, Vec3{1.000000, 0.205818, 0.000000}, Vec3{1.000000, 0.202927, 0.000000}, Vec3{1.000000, 0.200058, 0.000000}, Vec3{1.000000, 0.197211, 0.000000}, Vec3{1.000000, 0.194386, 0.000000}, Vec3{1.000000, 0.191584, 0.000000}, Vec3{1.000000, 0.188804, 0.000000}, Vec3{1.000000, 0.186045, 0.000000}, Vec3{1.000000, 0.183310, 0.000000}, Vec3{1.000000, 0.180596, 0.000000}, Vec3{1.000000, 0.177904, 0.000000}, Vec3{1.000000, 0.175234, 0.000000}, Vec3{1.000000, 0.172587, 0.000000}, Vec3{1.000000, 0.169961, 0.000000}, Vec3{1.000000, 0.167357, 0.000000}, Vec3{1.000000, 0.164775, 0.000000}, Vec3{1.000000, 0.162215, 0.000000}, Vec3{1.000000, 0.159677, 0.000000}, Vec3{1.000000, 0.157160, 0.000000}, Vec3{1.000000, 0.154666, 0.000000}, Vec3{1.000000, 0.152193, 0.000000}, Vec3{1.000000, 0.149742, 0.000000}, Vec3{1.000000, 0.147313, 0.000000}, Vec3{1.000000, 0.144905, 0.000000}, Vec3{1.000000, 0.142519, 0.000000}, Vec3{1.000000, 0.140154, 0.000000}, Vec3{1.000000, 0.137811, 0.000000}, Vec3{1.000000, 0.135490, 0.000000}, Vec3{1.000000, 0.133190, 0.000000}, Vec3{1.000000, 0.130911, 0.000000}, Vec3{1.000000, 0.128654, 0.000000}, Vec3{1.000000, 0.126419, 0.000000}, Vec3{1.000000, 0.124204, 0.000000}, Vec3{1.000000, 0.122011, 0.000000}, Vec3{1.000000, 0.119840, 0.000000}, Vec3{1.000000, 0.117689, 0.000000}, Vec3{1.000000, 0.115560, 0.000000}, Vec3{1.000000, 0.113452, 0.000000}, Vec3{1.000000, 0.111365, 0.000000}, Vec3{1.000000, 0.109300, 0.000000}, Vec3{1.000000, 0.107255, 0.000000}, Vec3{1.000000, 0.105231, 0.000000}, Vec3{1.000000, 0.103229, 0.000000}, Vec3{1.000000, 0.101247, 0.000000}, Vec3{1.000000, 0.099286, 0.000000}, Vec3{1.000000, 0.097346, 0.000000}, Vec3{1.000000, 0.095427, 0.000000}, Vec3{1.000000, 0.093529, 0.000000}, Vec3{1.000000, 0.091652, 0.000000}, Vec3{1.000000, 0.089795, 0.000000}, Vec3{1.000000, 0.087959, 0.000000}, Vec3{1.000000, 0.086144, 0.000000}, Vec3{1.000000, 0.084350, 0.000000}, Vec3{1.000000, 0.082576, 0.000000}, Vec3{1.000000, 0.080822, 0.000000}, Vec3{1.000000, 0.079089, 0.000000}, Vec3{1.000000, 0.077377, 0.000000}, Vec3{1.000000, 0.075684, 0.000000}, Vec3{1.000000, 0.074013, 0.000000}, Vec3{1.000000, 0.072361, 0.000000}, Vec3{1.000000, 0.070730, 0.000000}, Vec3{1.000000, 0.069120, 0.000000}, Vec3{1.000000, 0.067529, 0.000000}, Vec3{1.000000, 0.065959, 0.000000}, Vec3{1.000000, 0.064408, 0.000000}, Vec3{1.000000, 0.062878, 0.000000}, Vec3{1.000000, 0.061368, 0.000000}, Vec3{1.000000, 0.059878, 0.000000}, Vec3{1.000000, 0.058408, 0.000000}, Vec3{1.000000, 0.056958, 0.000000}, Vec3{1.000000, 0.055527, 0.000000}, Vec3{1.000000, 0.054117, 0.000000}, Vec3{1.000000, 0.052726, 0.000000}, Vec3{1.000000, 0.051355, 0.000000}, Vec3{1.000000, 0.050003, 0.000000}, Vec3{1.000000, 0.048672, 0.000000}, Vec3{1.000000, 0.047360, 0.000000}, Vec3{1.000000, 0.046067, 0.000000}, Vec3{1.000000, 0.044794, 0.000000}, Vec3{1.000000, 0.043540, 0.000000}, Vec3{1.000000, 0.042306, 0.000000}, Vec3{1.000000, 0.041091, 0.000000}, Vec3{1.000000, 0.039895, 0.000000}, Vec3{1.000000, 0.038719, 0.000000}, Vec3{1.000000, 0.037561, 0.000000}, Vec3{1.000000, 0.036423, 0.000000}, Vec3{1.000000, 0.035304, 0.000000}, Vec3{1.000000, 0.034204, 0.000000}, Vec3{1.000000, 0.033123, 0.000000}, Vec3{1.000000, 0.032061, 0.000000}, Vec3{1.000000, 0.031017, 0.000000}, Vec3{1.000000, 0.029993, 0.000000}, Vec3{1.000000, 0.028987, 0.000000}, Vec3{1.000000, 0.028000, 0.000000}, Vec3{1.000000, 0.027032, 0.000000}, Vec3{1.000000, 0.026082, 0.000000}, Vec3{1.000000, 0.025150, 0.000000}, Vec3{1.000000, 0.024237, 0.000000}, Vec3{1.000000, 0.023343, 0.000000}, Vec3{1.000000, 0.022466, 0.000000}, Vec3{1.000000, 0.021608, 0.000000}, Vec3{1.000000, 0.020769, 0.000000}, Vec3{1.000000, 0.019947, 0.000000}, Vec3{1.000000, 0.019143, 0.000000}, Vec3{1.000000, 0.018358, 0.000000}, Vec3{1.000000, 0.017590, 0.000000}, Vec3{1.000000, 0.016840, 0.000000}, Vec3{1.000000, 0.016108, 0.000000}, Vec3{1.000000, 0.015394, 0.000000}, Vec3{1.000000, 0.014697, 0.000000}, Vec3{1.000000, 0.014018, 0.000000}, Vec3{1.000000, 0.013356, 0.000000}, Vec3{1.000000, 0.012712, 0.000000}, Vec3{1.000000, 0.012085, 0.000000}, Vec3{1.000000, 0.011475, 0.000000}, Vec3{1.000000, 0.010883, 0.000000}, Vec3{1.000000, 0.010307, 0.000000}, Vec3{1.000000, 0.009749, 0.000000}, Vec3{1.000000, 0.009207, 0.000000}, Vec3{1.000000, 0.008683, 0.000000}, Vec3{1.000000, 0.008175, 0.000000}, Vec3{1.000000, 0.007683, 0.000000}, Vec3{1.000000, 0.007209, 0.000000}, Vec3{1.000000, 0.006751, 0.000000}, Vec3{1.000000, 0.006309, 0.000000}, Vec3{1.000000, 0.005883, 0.000000}, Vec3{1.000000, 0.005474, 0.000000}, Vec3{1.000000, 0.005080, 0.000000}, Vec3{1.000000, 0.004703, 0.000000}, Vec3{1.000000, 0.004341, 0.000000}, Vec3{1.000000, 0.003995, 0.000000}, Vec3{1.000000, 0.003665, 0.000000}, Vec3{1.000000, 0.003350, 0.000000}, Vec3{1.000000, 0.003051, 0.000000}, Vec3{1.000000, 0.002767, 0.000000}, Vec3{1.000000, 0.002497, 0.000000}, Vec3{1.000000, 0.002243, 0.000000}, Vec3{1.000000, 0.002004, 0.000000}, Vec3{1.000000, 0.001779, 0.000000}, Vec3{1.000000, 0.001569, 0.000000}, Vec3{1.000000, 0.001373, 0.000000}, Vec3{1.000000, 0.001191, 0.000000}, Vec3{1.000000, 0.001024, 0.000000}, Vec3{1.000000, 0.000870, 0.000000}, Vec3{1.000000, 0.000729, 0.000000}, Vec3{1.000000, 0.000602, 0.000000}, Vec3{1.000000, 0.000488, 0.000000}, Vec3{1.000000, 0.000387, 0.000000}, Vec3{1.000000, 0.000299, 0.000000}, Vec3{1.000000, 0.000223, 0.000000}, Vec3{1.000000, 0.000159, 0.000000}, Vec3{1.000000, 0.000106, 0.000000}, Vec3{1.000000, 0.000065, 0.000000}, Vec3{1.000000, 0.000035, 0.000000}, Vec3{1.000000, 0.000014, 0.000000}, Vec3{1.000000, 0.000003, 0.000000}, Vec3{1.000000, 0.000000, 0.000000}, Vec3{0.991393, 0.000000, 0.000000}, Vec3{0.982826, 0.000000, 0.000000}, Vec3{0.974300, 0.000000, 0.000000}, Vec3{0.965815, 0.000000, 0.000000}, Vec3{0.957370, 0.000000, 0.000000}, Vec3{0.948965, 0.000000, 0.000000}, Vec3{0.940601, 0.000000, 0.000000}, Vec3{0.932277, 0.000000, 0.000000}, Vec3{0.923993, 0.000000, 0.000000}, Vec3{0.915750, 0.000000, 0.000000}, Vec3{0.907547, 0.000000, 0.000000}, Vec3{0.899384, 0.000000, 0.000000}, Vec3{0.891262, 0.000000, 0.000000}, Vec3{0.883180, 0.000000, 0.000000}, Vec3{0.875138, 0.000000, 0.000000}, Vec3{0.867136, 0.000000, 0.000000}, Vec3{0.859174, 0.000000, 0.000000}, Vec3{0.851252, 0.000000, 0.000000}, Vec3{0.843370, 0.000000, 0.000000}, Vec3{0.835528, 0.000000, 0.000000}, Vec3{0.827726, 0.000000, 0.000000}, Vec3{0.819964, 0.000000, 0.000000}, Vec3{0.812241, 0.000000, 0.000000}, Vec3{0.804559, 0.000000, 0.000000}, Vec3{0.796917, 0.000000, 0.000000}, Vec3{0.789314, 0.000000, 0.000000}, Vec3{0.781751, 0.000000, 0.000000}, Vec3{0.774227, 0.000000, 0.000000}, Vec3{0.766744, 0.000000, 0.000000}, Vec3{0.759300, 0.000000, 0.000000}, Vec3{0.751895, 0.000000, 0.000000}, Vec3{0.744530, 0.000000, 0.000000}, Vec3{0.737205, 0.000000, 0.000000}, Vec3{0.729919, 0.000000, 0.000000}, Vec3{0.722672, 0.000000, 0.000000}, Vec3{0.715465, 0.000000, 0.000000}, Vec3{0.708298, 0.000000, 0.000000}, Vec3{0.701169, 0.000000, 0.000000}, Vec3{0.694081, 0.000000, 0.000000}, Vec3{0.687031, 0.000000, 0.000000}, Vec3{0.680020, 0.000000, 0.000000}, Vec3{0.673049, 0.000000, 0.000000}, Vec3{0.666117, 0.000000, 0.000000}, Vec3{0.659224, 0.000000, 0.000000}, Vec3{0.652370, 0.000000, 0.000000}, Vec3{0.645555, 0.000000, 0.000000}, Vec3{0.638779, 0.000000, 0.000000}, Vec3{0.632043, 0.000000, 0.000000}, Vec3{0.625345, 0.000000, 0.000000}, Vec3{0.618686, 0.000000, 0.000000}, Vec3{0.612066, 0.000000, 0.000000}, Vec3{0.605484, 0.000000, 0.000000}, Vec3{0.598942, 0.000000, 0.000000}, Vec3{0.592438, 0.000000, 0.000000}, Vec3{0.585973, 0.000000, 0.000000}, Vec3{0.579547, 0.000000, 0.000000}, Vec3{0.573159, 0.000000, 0.000000}, Vec3{0.566810, 0.000000, 0.000000}, Vec3{0.560499, 0.000000, 0.000000}, Vec3{0.554227, 0.000000, 0.000000}, Vec3{0.547994, 0.000000, 0.000000}, Vec3{0.541798, 0.000000, 0.000000}, Vec3{0.535642, 0.000000, 0.000000}, Vec3{0.529523, 0.000000, 0.000000}, Vec3{0.523443, 0.000000, 0.000000}, Vec3{0.517401, 0.000000, 0.000000}, Vec3{0.511398, 0.000000, 0.000000}, Vec3{0.505432, 0.000000, 0.000000}, Vec3{0.499505, 0.000000, 0.000000}, Vec3{0.493616, 0.000000, 0.000000}, Vec3{0.487765, 0.000000, 0.000000}, Vec3{0.481952, 0.000000, 0.000000}, Vec3{0.476177, 0.000000, 0.000000}, Vec3{0.470440, 0.000000, 0.000000}, Vec3{0.464741, 0.000000, 0.000000}, Vec3{0.459080, 0.000000, 0.000000}, Vec3{0.453456, 0.000000, 0.000000}, Vec3{0.447871, 0.000000, 0.000000}, Vec3{0.442323, 0.000000, 0.000000}, Vec3{0.436813, 0.000000, 0.000000}, Vec3{0.431340, 0.000000, 0.000000}, Vec3{0.425905, 0.000000, 0.000000}, Vec3{0.420508, 0.000000, 0.000000}, Vec3{0.415148, 0.000000, 0.000000}, Vec3{0.409826, 0.000000, 0.000000}, Vec3{0.404541, 0.000000, 0.000000}, Vec3{0.399293, 0.000000, 0.000000}, Vec3{0.394083, 0.000000, 0.000000}, Vec3{0.388910, 0.000000, 0.000000}, Vec3{0.383775, 0.000000, 0.000000}, Vec3{0.378676, 0.000000, 0.000000}, Vec3{0.373615, 0.000000, 0.000000}, Vec3{0.368591, 0.000000, 0.000000}, Vec3{0.363604, 0.000000, 0.000000}, Vec3{0.358654, 0.000000, 0.000000}, Vec3{0.353741, 0.000000, 0.000000}, Vec3{0.348865, 0.000000, 0.000000}, Vec3{0.344026, 0.000000, 0.000000}, Vec3{0.339223, 0.000000, 0.000000}, Vec3{0.334458, 0.000000, 0.000000}, Vec3{0.329729, 0.000000, 0.000000}, Vec3{0.325037, 0.000000, 0.000000}, Vec3{0.320382, 0.000000, 0.000000}, Vec3{0.315763, 0.000000, 0.000000}, Vec3{0.311181, 0.000000, 0.000000}, Vec3{0.306635, 0.000000, 0.000000}, Vec3{0.302126, 0.000000, 0.000000}, Vec3{0.297653, 0.000000, 0.000000}, Vec3{0.293216, 0.000000, 0.000000}, Vec3{0.288816, 0.000000, 0.000000}, Vec3{0.284452, 0.000000, 0.000000}, Vec3{0.280124, 0.000000, 0.000000}, Vec3{0.275833, 0.000000, 0.000000}, Vec3{0.271577, 0.000000, 0.000000}, Vec3{0.267358, 0.000000, 0.000000}, Vec3{0.263175, 0.000000, 0.000000}, Vec3{0.259027, 0.000000, 0.000000}, Vec3{0.254916, 0.000000, 0.000000}, Vec3{0.250840, 0.000000, 0.000000}, Vec3{0.246800, 0.000000, 0.000000}, Vec3{0.242796, 0.000000, 0.000000}, Vec3{0.238828, 0.000000, 0.000000}, Vec3{0.234895, 0.000000, 0.000000}, Vec3{0.230998, 0.000000, 0.000000}, Vec3{0.227137, 0.000000, 0.000000}, Vec3{0.223310, 0.000000, 0.000000}, Vec3{0.219520, 0.000000, 0.000000}, Vec3{0.215764, 0.000000, 0.000000}, Vec3{0.212044, 0.000000, 0.000000}, };

DEVICE Vec3 trace_impl(Ray ray, XorShiftRNG &rng) {
  Vec3 fac{1.0f, 1.0f, 1.0f};
  for (u32 _ = 0; _ < 10; ++_) {
    HitRes res{1e10};
    {
      f32 dot_d_n = ray.d.dot(Vec3{1, 0, 0});
      f32 t = (Vec3{0, 0, 0} - ray.o).dot(Vec3{1, 0, 0}) / dot_d_n;
      if (t > EPS && t < res.t) {
        res.t = t;
        res.norm = Vec3{1, 0, 0};
        res.text = 0;
        res.col = Vec3{0.75, 0.25, 0.25};
      }
    }
    {
      f32 dot_d_n = ray.d.dot(Vec3{1, 0, 0});
      f32 t = (Vec3{10, 0, 0} - ray.o).dot(Vec3{1, 0, 0}) / dot_d_n;
      if (t > EPS && t < res.t) {
        res.t = t;
        res.norm = Vec3{1, 0, 0};
        res.text = 0;
        res.col = Vec3{0.25, 0.25, 0.75};
      }
    }
    {
      f32 dot_d_n = ray.d.dot(Vec3{0, 0, 1});
      f32 t = (Vec3{0, 0, 0} - ray.o).dot(Vec3{0, 0, 1}) / dot_d_n;
      if (t > EPS && t < res.t) {
        res.t = t;
        res.norm = Vec3{0, 0, 1};
        res.text = 0;
        res.col = Vec3{0.75, 0.75, 0.75};
      }
    }
    {
      f32 dot_d_n = ray.d.dot(Vec3{0, 0, 1});
      f32 t = (Vec3{0, 0, 20} - ray.o).dot(Vec3{0, 0, 1}) / dot_d_n;
      if (t > EPS && t < res.t) {
        res.t = t;
        res.norm = Vec3{0, 0, 1};
        res.text = 0;
        res.col = Vec3{0.75, 0.75, 0.75};
      }
    }
    {
      f32 dot_d_n = ray.d.dot(Vec3{0, 1, 0});
      f32 t = (Vec3{0, 0, 0} - ray.o).dot(Vec3{0, 1, 0}) / dot_d_n;
      if (t > EPS && t < res.t) {
        res.t = t;
        res.norm = Vec3{0, 1, 0};
        res.text = 0;
        res.col = Vec3{0.75, 0.75, 0.75};
      }
    }
    {
      f32 dot_d_n = ray.d.dot(Vec3{0, 1, 0});
      f32 t = (Vec3{0, 8.5, 0} - ray.o).dot(Vec3{0, 1, 0}) / dot_d_n;
      if (t > EPS && t < res.t) {
        res.t = t;
        res.norm = Vec3{0, 1, 0};
        res.text = 0;
        res.col = Vec3{0.75, 0.75, 0.75};
      }
    }

    {
      Vec3 oc = Vec3{2.7, 1.65, 4.7} - ray.o;
      f32 b = oc.dot(ray.d);
      f32 det = b * b - oc.len2() + 1.65 * 1.65;
      if (det > 0.0f) {
        f32 sq_det = sqrtf(det);
        f32 t = b - sq_det > EPS ? b - sq_det : b + sq_det > EPS ? b + sq_det : 0.0f;
        if (t && t < res.t) {
          res.t = t;
          res.norm = (ray.o + ray.d * t - Vec3{2.7, 1.65, 4.7}).norm();
          res.text = 1;
          res.col = Vec3{0.999, 0.999, 0.999};
        }
      }
    }
    {
      Vec3 oc = Vec3{7.3, 1.65, 7.8} - ray.o;
      f32 b = oc.dot(ray.d);
      f32 det = b * b - oc.len2() + 1.65 * 1.65;
      if (det > 0.0f) {
        f32 sq_det = sqrtf(det);
        f32 t = b - sq_det > EPS ? b - sq_det : b + sq_det > EPS ? b + sq_det : 0.0f;
        if (t && t < res.t) {
          res.t = t;
          res.norm = (ray.o + ray.d * t - Vec3{7.3, 1.65, 7.8}).norm();
          res.text = 2;
          // f32 sel = rng.gen();
          // f32 freq = 400 + 300 * sel;
          // spectral_color(res.col.x, res.col.y, res.col.z, freq);
          res.col.x *= 1.354535f;
          res.col.z *= 1.981782f;
          u32 sel = rng.gen_u32() % 1150;
          res.col = RGB_TABLE[sel] * 3;
          res.n = 1.7 - sel * 0.5 / 1150;
        }
      }
    }

    {
      f32 dot_d_n = ray.d.dot(Vec3{0, 1, 0});
      f32 t = (Vec3{5, 8.45, 5} - ray.o).dot(Vec3{0, 1, 0}) / dot_d_n;
      if (t > EPS && t < res.t && (ray.o + ray.d * t - Vec3{5, 8.45, 5}).len2() < 2.25) {
        return fac.schur(Vec3{3, 3, 3});
      }
    }
    if (res.t == 1e10) { break; }
    Vec3 p = ray.o + ray.d * res.t;
    fac = fac.schur(res.col);
    switch (res.text) {
      case 0: {
        f32 r1 = 2.0f * PI * rng.gen();
        f32 r2 = rng.gen(), r2s = sqrtf(r2);
        Vec3 w = res.norm.dot(ray.d) < 0.0f ? res.norm : -res.norm;
        Vec3 u = w.orthogonal_unit();
        Vec3 v = w.cross(u);
        Vec3 d = (u * cosf(r1) + v * sinf(r1)) * r2s + w * sqrtf(1.0f - r2);
        ray = {p, d.norm()};
        break;
      }
      case 1: {
        ray = {p, ray.d - res.norm * 2.0f * res.norm.dot(ray.d)};
        break;
      }
      case 2: {
        const f32 NA = 1.0f, NG = res.n, R0 = (NA - NG) * (NA - NG) / ((NA + NG) * (NA + NG));
        f32 cos = res.norm.dot(ray.d), sin = sqrtf(1.0f - cos * cos), n;
        Vec3 norm_d = res.norm;
        if (cos < 0.0f) {
          n = NG / NA;
          cos = -cos;
          norm_d = -norm_d;
        } else {
          n = NA / NG;
          if (sin >= n) {
            ray = {p, ray.d - res.norm * 2.0f * res.norm.dot(ray.d)};
            break;
          }
        }
        if (rng.gen() < R0 + (1.0f - R0) * powf(1.0f - cos, 5)) {
          ray = {p, ray.d - res.norm * 2.0f * res.norm.dot(ray.d)};
        } else {
          ray = {p, norm_d * (sqrtf(1.0f - sin * sin / (n * n)) - cos / n) + ray.d / n};
        }
        break;
      }
    }
  }
  return Vec3{};
}

GLOBAL void trace(Vec3 *gpu_output, u32 ns) {
  constexpr Ray cam{Vec3{5, 5.2, 29.56}, Vec3{0, -0.042573366, -0.9990933}};
  constexpr Vec3 cx{0.5135, 0, 0};
  constexpr Vec3 cy{0, 0.5130344, -0.021861423};

  u32 x = blockIdx.x, y = blockIdx.y, th = threadIdx.x;
  u32 index = y * 2048 + x;
  XorShiftRNG rng{index + th * 19260817};
  Vec3 sum{};
  for (u32 s = 0; s < ns / (CUDA_BLOCK_SIZE * 4); ++s) {
    for (u32 sx = 0; sx < 2; ++sx) {
      for (u32 sy = 0; sy < 2; ++sy) {
        f32 r1 = 2.0f * rng.gen(), r2 = 2.0f * rng.gen();
        f32 dx = r1 < 1.0f ? sqrtf(r1) - 1.0f : 1.0f - sqrtf(2.0f - r1);
        f32 dy = r2 < 1.0f ? sqrtf(r2) - 1.0f : 1.0f - sqrtf(2.0f - r2);
        Vec3 d = cx * (((sx + 0.5f + dx) * 0.5f + x) / 2048 - 0.5f) + cy * (((sy + 0.5f + dy) * 0.5f + y) / 2048 - 0.5f) + cam.d;
        sum += trace_impl(Ray{cam.o + d * 14.0f, d.norm()}, rng);
      }
    }
  }
  sum /= ns;
  atomicAdd(&gpu_output[index].x, sum.x);
  atomicAdd(&gpu_output[index].y, sum.y);
  atomicAdd(&gpu_output[index].z, sum.z);
}

Vec3 cpu_output[2048 * 2048];

void init_res() {
}

void free_res() {
}

int main(int argc, char **args) {
  u32 ns = argc > 1 ? atoi(args[1]) : (puts("please specify #sample"), exit(-1), 0);
  ns = (ns + (CUDA_BLOCK_SIZE * 4) - 1) / (CUDA_BLOCK_SIZE * 4) * (CUDA_BLOCK_SIZE * 4);
  init_res();
  Vec3 *gpu_output;
  cudaMalloc(&gpu_output, 2048 * 2048 * sizeof(Vec3));
  trace<<<dim3(2048, 2048, 1), CUDA_BLOCK_SIZE>>>(gpu_output, ns);
  cudaMemcpy(cpu_output, gpu_output, 2048 * 2048 * sizeof(Vec3), cudaMemcpyDeviceToHost);
  cudaFree(gpu_output);
  free_res();
  CUDA_CHECK_ERROR(cudaGetLastError());
  output_png(cpu_output, 2048, 2048, argc > 2 ? args[2] : "image.png");
}
